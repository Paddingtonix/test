import axios from "axios";
import "../../index.scss"
import {ButtonCmp} from "../button-cmp/button-cmp"
import {SelectorCmp} from "../selector-cmp/selector-cmp";
import React, {useState, useRef, useEffect} from 'react'

interface NavbarProps {
    graph_state: (state: boolean | ((prevState: boolean) => boolean)) => void;
    graph_data: any;
    update_data: any;
}

export const NavbarCmp: React.FC<NavbarProps> = ({graph_state, graph_data, update_data}) => {

    const [visState, setVisState] = useState(true);
    const [selectedFile, setSelectedFile] = useState(null)
    const fileInputRef = useRef<HTMLInputElement | null>(null);

    //func
    const filterParams = (state: any) => {
        graph_data(state)
    }

    const handleFileChange = (event: any) => {

        const file = event.target.files[0];
        setSelectedFile(file);
    };

    const uploadFile = () => {
        if (selectedFile) {
            const fd = new FormData();
            fd.append('file', selectedFile);

            axios
                .post('/upload', fd)
                .then((resp) => {
                    update_data(true)
                })
        } else {
            if (fileInputRef && fileInputRef.current) {
                fileInputRef.current.click();
            }
        }
    };


    const [selectorType] = useState([
        {
            placeholder: 'Типы вершин',
            type: 'type_nodes',
            list: [
                {text: 'PVT'},
                {text: 'Керн'},
                {text: 'ПЕТРОФИЗИКА'},
                {text: 'Сейсмика'},
                {text: 'скв.иссл'},
            ],
            filterParams: (state: string) => filterParams(state)
        },
        {
            placeholder: 'Типы связи',
            type: 'type_edges',
            list: [
                {text: 'Односторонняя'},
                {text: 'Двусторонняя'},
            ],
            filterParams: (state: string) => filterParams(state)
        },
        {
            placeholder: 'Типы атрибутам',
            type: 'type_attributes',
            list: [
                {text: 'По формату'},
                {text: 'По типу вершин'},
            ],
            filterParams: (state: string) => filterParams(state)
        },
    ]);

    const change_option = () => {
        setVisState((prevState) => {
            const newState = !prevState;
            graph_state(newState);

            return newState;
        });
    };
    {
        return (
            <div className="navbar">
                <div className="navbar__left-side">
					<span className="navbar__left-side__logo">
						<svg width="80" height="30" viewBox="0 0 641 218" fill="none"
                             xmlns="http://www.w3.org/2000/svg">
							<path
                                d="M75.4839 175.146C65.7056 175.146 56.5831 173.537 48.1165 170.317C39.7692 167.097 32.495 162.566 26.2942 156.723C20.2125 150.88 15.4426 144.023 11.9844 136.152C8.64547 128.282 6.976 119.696 6.976 110.395C6.976 101.094 8.64547 92.5077 11.9844 84.6373C15.4426 76.767 20.2721 69.9102 26.473 64.0671C32.6739 58.2239 39.948 53.6925 48.2954 50.4728C56.6427 47.2531 65.7056 45.6433 75.4839 45.6433C85.3815 45.6433 94.4443 47.2531 102.672 50.4728C111.02 53.6925 118.234 58.2239 124.316 64.0671C130.517 69.791 135.346 76.5881 138.805 84.4585C142.263 92.3288 143.992 100.974 143.992 110.395C143.992 119.696 142.263 128.342 138.805 136.331C135.346 144.202 130.517 151.058 124.316 156.902C118.234 162.625 111.02 167.097 102.672 170.317C94.4443 173.537 85.3815 175.146 75.4839 175.146ZM116.446 201.798C111.556 201.798 106.906 201.262 102.494 200.189C98.2006 199.115 93.9077 197.386 89.6148 195.001C85.4411 192.616 81.0289 189.397 76.3783 185.342C71.8468 181.288 66.8981 176.279 61.5319 170.317L91.9401 162.625C95.1598 167.038 98.141 170.555 100.884 173.179C103.626 175.802 106.25 177.651 108.754 178.724C111.378 179.797 114.12 180.334 116.982 180.334C124.614 180.334 131.411 177.233 137.374 171.032L150.252 186.415C141.786 196.671 130.517 201.798 116.446 201.798ZM75.4839 150.462C81.0885 150.462 86.2162 149.508 90.8669 147.6C95.6368 145.692 99.8105 142.95 103.388 139.372C106.965 135.795 109.708 131.561 111.616 126.672C113.643 121.664 114.657 116.238 114.657 110.395C114.657 104.432 113.643 99.0067 111.616 94.1175C109.708 89.2284 106.965 84.9951 103.388 81.4176C99.8105 77.8402 95.6368 75.0975 90.8669 73.1895C86.2162 71.2816 81.0885 70.3276 75.4839 70.3276C69.8793 70.3276 64.692 71.2816 59.9221 73.1895C55.1521 75.0975 50.9785 77.8402 47.401 81.4176C43.9428 84.9951 41.2001 89.2284 39.1729 94.1175C37.265 99.0067 36.311 104.432 36.311 110.395C36.311 116.238 37.265 121.664 39.1729 126.672C41.2001 131.561 43.9428 135.795 47.401 139.372C50.9785 142.95 55.1521 145.692 59.9221 147.6C64.692 149.508 69.8793 150.462 75.4839 150.462ZM147.566 173L203.374 47.7897H231.994L287.981 173H257.573L211.781 62.4572H223.229L177.259 173H147.566ZM175.47 146.169L183.162 124.168H247.556L255.426 146.169H175.47ZM433.577 175.146C423.799 175.146 414.676 173.537 406.209 170.317C397.862 167.097 390.588 162.566 384.387 156.723C378.305 150.88 373.536 144.023 370.077 136.152C366.738 128.282 365.069 119.696 365.069 110.395C365.069 101.094 366.738 92.5077 370.077 84.6373C373.536 76.767 378.365 69.9102 384.566 64.0671C390.767 58.2239 398.041 53.6925 406.388 50.4728C414.736 47.2531 423.799 45.6433 433.577 45.6433C443.474 45.6433 452.537 47.2531 460.765 50.4728C469.113 53.6925 476.327 58.2239 482.409 64.0671C488.61 69.791 493.439 76.5881 496.897 84.4585C500.356 92.3288 502.085 100.974 502.085 110.395C502.085 119.696 500.356 128.342 496.897 136.331C493.439 144.202 488.61 151.058 482.409 156.902C476.327 162.625 469.113 167.097 460.765 170.317C452.537 173.537 443.474 175.146 433.577 175.146ZM474.538 201.798C469.649 201.798 464.999 201.262 460.586 200.189C456.294 199.115 452.001 197.386 447.708 195.001C443.534 192.616 439.122 189.397 434.471 185.342C429.94 181.288 424.991 176.279 419.625 170.317L450.033 162.625C453.253 167.038 456.234 170.555 458.977 173.179C461.719 175.802 464.343 177.651 466.847 178.724C469.47 179.797 472.213 180.334 475.075 180.334C482.707 180.334 489.504 177.233 495.466 171.032L508.345 186.415C499.879 196.671 488.61 201.798 474.538 201.798ZM433.577 150.462C439.182 150.462 444.309 149.508 448.96 147.6C453.73 145.692 457.903 142.95 461.481 139.372C465.058 135.795 467.801 131.561 469.709 126.672C471.736 121.664 472.75 116.238 472.75 110.395C472.75 104.432 471.736 99.0067 469.709 94.1175C467.801 89.2284 465.058 84.9951 461.481 81.4176C457.903 77.8402 453.73 75.0975 448.96 73.1895C444.309 71.2816 439.182 70.3276 433.577 70.3276C427.972 70.3276 422.785 71.2816 418.015 73.1895C413.245 75.0975 409.071 77.8402 405.494 81.4176C402.036 84.9951 399.293 89.2284 397.266 94.1175C395.358 99.0067 394.404 104.432 394.404 110.395C394.404 116.238 395.358 121.664 397.266 126.672C399.293 131.561 402.036 135.795 405.494 139.372C409.071 142.95 413.245 145.692 418.015 147.6C422.785 149.508 427.972 150.462 433.577 150.462ZM583.784 175.146C574.125 175.146 565.122 173.596 556.775 170.496C548.547 167.276 541.392 162.745 535.31 156.902C529.229 151.058 524.459 144.202 521 136.331C517.662 128.461 515.992 119.815 515.992 110.395C515.992 100.974 517.662 92.3288 521 84.4585C524.459 76.5881 529.229 69.7313 535.31 63.8882C541.511 58.0451 548.726 53.5733 556.954 50.4728C565.182 47.2531 574.185 45.6433 583.963 45.6433C594.815 45.6433 604.593 47.5512 613.298 51.3672C622.123 55.0639 629.516 60.5493 635.478 67.8234L616.876 84.9951C612.583 80.1059 607.813 76.4688 602.566 74.0839C597.319 71.5797 591.595 70.3276 585.394 70.3276C579.551 70.3276 574.185 71.2816 569.296 73.1895C564.407 75.0975 560.173 77.8402 556.596 81.4176C553.019 84.9951 550.216 89.2284 548.189 94.1175C546.281 99.0067 545.327 104.432 545.327 110.395C545.327 116.357 546.281 121.783 548.189 126.672C550.216 131.561 553.019 135.795 556.596 139.372C560.173 142.95 564.407 145.692 569.296 147.6C574.185 149.508 579.551 150.462 585.394 150.462C591.595 150.462 597.319 149.27 602.566 146.885C607.813 144.381 612.583 140.624 616.876 135.616L635.478 152.787C629.516 160.062 622.123 165.607 613.298 169.423C604.593 173.238 594.755 175.146 583.784 175.146Z"
                                fill="white"/>
							<path d="M285.637 190.887L344.665 22.3899H369.528L310.5 190.887H285.637Z" fill="#3FBAC2"/>
					  	</svg>
				  	</span>
                    <div className="navbar__left-side__visible-option">
					  <span className="navbar__left-side__visible-option__text">
						  Вариант отображения
					  </span>
                        <ButtonCmp
                            OnClick={change_option}
                            name={visState ? 'Таблица' : 'Граф'}
                        ></ButtonCmp>
                    </div>
                </div>
                <div className="navbar__center-side">
                    {selectorType.map((selector_type) => (
                        <SelectorCmp
                            key={selector_type.placeholder}
                            selector_placeholder={selector_type.placeholder}
                            selector_list={selector_type.list}
                            selector_value={selector_type.filterParams}
                            selector_type={selector_type.type}
                        ></SelectorCmp>
                    ))}
                </div>
                <PersonalAccountDropdown/>
                {/*<ButtonCmp*/}
                {/*  OnClick={uploadFile}*/}
                {/*  name={!selectedFile ? 'Загрузить данные' : 'Отправить файл'}*/}
                {/*></ButtonCmp>*/}

                {/*<input id='fileUpload' type="file" onChange={handleFileChange} ref={fileInputRef} style={{ display: 'none' }} />*/}
                {/* <div className="elements">Выход</div> */}
            </div>
        );
    }
};

const PersonalAccountDropdown = () => {

    const [isOpen, setIsOpen] = useState(false);
    const ref = useOutsideClick(() => {
        setIsOpen(false);
    });

    return (
        <div className={"personal-account-dropdown"} ref={ref}>
            <div className={`personal-account-dropdown__panel ${isOpen && "personal-account-dropdown__panel_open"}`}
                 onClick={() => setIsOpen(!isOpen)}
            >
                <img alt={""}
                     src={"https://ih1.redbubble.net/image.580238014.1198/st,small,507x507-pad,600x600,f8f8f8.u4.jpg"}/>
                <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M3.51501 8.465L12 16.95L20.485 8.465L19.071 7.05L12 14.122L4.92901 7.05L3.51501 8.465Z"
                          fill="#2E3A59"/>
                </svg>
            </div>
            {
                isOpen &&
                <div className={"personal-account-dropdown__list"}>
                    <ul>
                        <li>
                            <svg width="16" height="16" viewBox="0 0 1024 1024" version="1.1"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path
                                    d="M702.537143 218.477714c31.085714-10.825143 55.003429-23.113143 69.924571-35.328 10.24-8.338286 13.458286-13.824 13.458286-16.018285s-3.218286-7.68-13.458286-16.091429c-14.921143-12.141714-38.765714-24.429714-69.924571-35.254857C634.368 92.16 540.013714 78.336 438.857143 78.336s-195.510857 13.897143-263.68 37.449143c-31.085714 10.825143-55.003429 23.113143-69.924572 35.328-10.24 8.338286-13.458286 13.750857-13.458285 16.018286 0 2.194286 3.218286 7.68 13.458285 16.091428 14.921143 12.141714 38.765714 24.429714 69.924572 35.254857 68.169143 23.625143 162.523429 37.449143 263.68 37.449143s195.510857-13.897143 263.68-37.449143zM69.485714 464.749714v128.804572c37.961143 40.009143 140.068571 88.722286 264.777143 103.277714 182.857143 21.284571 355.986286-18.651429 473.526857-98.304l0.438857-131.657143C683.008 540.525714 506.733714 571.465143 328.484571 550.619429c-110.372571-12.8-204.361143-46.08-259.072-85.869715z m0-80.457143c38.034286 39.936 140.068571 88.649143 264.777143 103.131429 183.222857 21.357714 356.717714-18.724571 474.258286-98.742857l0.512-145.993143C734.208 286.573714 596.48 315.977143 438.857143 315.977143c-156.964571 0-294.253714-29.257143-369.152-72.777143A132116.333714 132116.333714 0 0 0 69.485714 384.219429z m0.146286 289.865143l0.292571 108.105143-1.097142-7.460571c22.381714 74.020571 165.302857 133.485714 378.148571 133.485714 115.931429 0 206.774857-17.554286 276.626286-52.077714 19.602286-9.728 34.523429-17.92 49.152-28.598857 9.728-7.094857 16.091429-11.410286 26.550857-20.626286 10.825143-9.581714 27.501714-7.241143 37.156571 3.657143 9.581714 10.752 10.825143 28.306286 0 37.961143-11.702857 10.24-17.188571 14.848-28.598857 23.186285-17.042286 12.434286-36.425143 25.380571-58.806857 36.498286-77.092571 38.107429-155.648 60.854857-302.08 60.854857-243.931429 0-405.211429-77.165714-436.077714-179.2l-1.097143-3.657143v-3.803428L9.362286 628.077714a116682.532571 116682.532571 0 0 1 0.365714-455.68 52.662857 52.662857 0 0 1-0.292571-5.266285C9.508571 84.918857 201.728 18.285714 438.857143 18.285714c237.129143 0 429.348571 66.633143 429.348571 148.845715a53.028571 53.028571 0 0 1-0.804571 9.581714 23.405714 23.405714 0 0 1 1.024 7.094857l-1.682286 520.411429c-0.073143 14.482286-13.385143 26.185143-29.769143 26.112-16.384 0-29.622857-11.776-29.549714-26.331429v-27.355429c-125.074286 73.216-301.056 104.082286-478.939429 83.382858-110.226286-12.873143-204.214857-46.08-258.925714-85.869715z m668.525714-290.962285a25.746286 25.746286 0 0 1-25.965714-25.453715c0-14.043429 11.702857-25.380571 26.038857-25.380571 14.336 0 26.038857 11.337143 26.038857 25.380571 0 14.116571-11.702857 25.453714-26.038857 25.453715z m0 209.408a25.746286 25.746286 0 0 1-25.965714-25.453715c0-14.043429 11.702857-25.453714 26.038857-25.453714 14.336 0 26.038857 11.410286 26.038857 25.453714 0 14.043429-11.702857 25.453714-26.038857 25.453715z m0 212.114285a25.746286 25.746286 0 0 1-25.965714-25.526857c0-14.043429 11.702857-25.453714 26.038857-25.453714 14.336 0 26.038857 11.410286 26.038857 25.453714 0 14.043429-11.702857 25.453714-26.038857 25.453714z"
                                    fill="white"/>
                            </svg>
                            Загрузить данные
                        </li>
                        <li>
                            <svg width="16px" height="16px" viewBox="0 0 24 24" fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <path d="M21 12L13 12" stroke="white" strokeWidth="2" strokeLinecap="round"
                                      strokeLinejoin="round"/>
                                <path
                                    d="M18 15L20.913 12.087V12.087C20.961 12.039 20.961 11.961 20.913 11.913V11.913L18 9"
                                    stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                                <path
                                    d="M16 5V4.5V4.5C16 3.67157 15.3284 3 14.5 3H5C3.89543 3 3 3.89543 3 5V19C3 20.1046 3.89543 21 5 21H14.5C15.3284 21 16 20.3284 16 19.5V19.5V19"
                                    stroke="white" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                            Выйти
                        </li>
                    </ul>
                </div>
            }
        </div>
    )
}

export const useOutsideClick = (callback: () => void) => {
    const ref = useRef<HTMLDivElement>(null);

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (ref.current && !ref.current.contains(event.target as Node)) {
                callback();
            }
        };

        document.addEventListener('mousedown', handleClickOutside);

        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [callback]);

    return ref;
};
  




